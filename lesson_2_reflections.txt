What happens when you initialize a repository? Why do you need to do it?

the initialization step creates the files that git needs to track the contents of a project. However it does not actually run an initial commit! you need to do that yourself

How is the staging area different from the working directory and the repository? What value do you think it offers?

the staging area is a holding pen for a future commit. It allows you to assemble past files with new files that need to be tracked and then commit the logical change as a cohesive unit. Separating this from the working directory allows you to maintain untracked data alongside your repo. 

How can you use the staging area to make sure you have one commit per logical change?
Staging allows you to make sure that only the files that you want to commit, not necessarily all the files with changes, get added at one time. You may have done more than one thing, and you can stage these and commit them separately (though this is easiest if you have done it in different files.

What are some situations when branches would be helpful in keeping your history organized? How would branches help?

Branches help to maintain multiple working versions of a project, which may include separate elements that may or may not be merged later. Woot! This is the part I cared about

How do the diagrams help you visualize the branch structure?

if you have multiple branches going at once, it helps to know what baseline they have in common, and where they diverge. some branches may be phylogenetically closer to eachother than others, which is good to visualize.

What is the result of merging two branches together? Why do we represent it in the diagram the way we do?
It tries to take the changes that have been made since the two branches common source, and brings them together into a single version of the file that incorporates all of these changes. 

What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges manually?
pros: unbelievably fast and easy if changes are modular and independent
cons: arduous and problematic if there are subtle interrelationships that produce bugs, and you didn't see them or think through them