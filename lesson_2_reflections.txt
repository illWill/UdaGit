What happens when you initialize a repository? Why do you need to do it?

the initialization step creates the files that git needs to track the contents of a project. However it does not actually run an initial commit! you need to do that yourself

How is the staging area different from the working directory and the repository? What value do you think it offers?

the staging area is a holding pen for a future commit. It allows you to assemble past files with new files that need to be tracked and then commit the logical change as a cohesive unit. Separating this from the working directory allows you to maintain untracked data alongside your repo. 

How can you use the staging area to make sure you have one commit per logical change?
Staging allows you to make sure that only the files that you want to commit, not necessarily all the files with changes, get added at one time. You may have done more than one thing, and you can stage these and commit them separately (though this is easiest if you have done it in different files.


More importantly: how to make a commit:
git init
git init
git add <file>
git add <file>
git commit 
*type in the name of the change (like "add helloworld.pl to repository")
:x

Back to most recent commit: git checkout master
Get a new git: git clone <whatever URL>

look at all commits: git log
look at "status": git status
back to master: git checkout master

Diff:
default to wd vs staging: git diff 
staging vs last change: git diff --staged
commit1 v commit2: git diff ID1 ID2
diff ignores whitespace: git diff -w

remove all changes (!!! careful son!): git reset --hard